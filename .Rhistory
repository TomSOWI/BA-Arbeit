gruendl_10 = min(gruendl_10),
clara = min(clara),
clara_10 = min(clara_10)
)
speeches10Relia <- data.frame(gruendl = unlist(reliaGruendl_speeches), clara = unlist(reliaClara_speeches), gruendl_10 = unlist(reliaGruendl_speeches10), clara_10 = unlist(reliaClara_speeches10))
df_long <- pivot_longer(speeches10Relia, cols = 1:4, names_to = "Diktionäre", values_to = "relia")
ggplot(df_long, aes(Diktionäre, relia))+
geom_boxplot()+
ylab("Split-Half Reliabilität")
#scale_y_continuous(limits = c(0,1))
dfMean <- speeches10Relia  %>%
reframe(
gruendl = mean(gruendl),
gruendl_10 = mean(gruendl_10),
clara = mean(clara),
clara_10 = mean(clara_10)
)
dfMin <- speeches10Relia  %>%
reframe(
gruendl = min(gruendl),
gruendl_10 = min(gruendl_10),
clara = min(clara),
clara_10 = min(clara_10)
)
mp10Relia <- data.frame(gruendl = unlist(reliaGruendl_mp), clara = unlist(reliaClara_mp), gruendl_10 = unlist(reliaGruendl_mp10), clara_10 = unlist(reliaClara_mp10))
df_long <- pivot_longer(mp10Relia, cols = 1:4, names_to = "Diktionäre", values_to = "relia")
ggplot(df_long, aes(Diktionäre, relia))+
geom_boxplot()+
ylab("Split-Half Reliabilität")
#scale_y_continuous(limits = c(0,1))
dfMean <- mp10Relia   %>%
reframe(
gruendl = mean(gruendl),
gruendl_10 = mean(gruendl_10),
clara = mean(clara),
clara_10 = mean(clara_10)
)
dfMin <- mp10Relia   %>%
reframe(
gruendl = min(gruendl),
gruendl_10 = min(gruendl_10),
clara = min(clara),
clara_10 = min(clara_10)
)
speechesRelia <- data.frame(gruendl = unlist(reliaGruendl_speeches), clara = unlist(reliaClara_speeches), claraK = unlist(reliaClaraK_speeches), kmeans = unlist(reliaKmeans_speeches), kmeansK = unlist(reliaKmeansK_speeches))
df_long <- pivot_longer(speechesRelia, cols = 1:5, names_to = "Diktionäre", values_to = "relia")
ggplot(df_long, aes(Diktionäre, relia))+
geom_boxplot()+
ylab("Split-Half Reliabilität")
#scale_y_continuous(limits = c(0,1))
dfMean <- speechesRelia %>%
reframe(
gruendl = mean(gruendl),
clara = mean(clara),
claraK = mean(claraK),
kmeans = mean(kmeans),
kmeansK = mean(kmeansK)
)
dfMin <- speechesRelia %>%
reframe(
gruendl = min(gruendl),
clara = min(clara),
claraK = min(claraK),
kmeans = min(kmeans),
kmeansK = min(kmeansK)
)
mpRelia <- data.frame(gruendl = unlist(reliaGruendl_mp), clara = unlist(reliaClara_mp), claraK = unlist(reliaClaraK_mp), kmeans = unlist(reliaKmeans_mp), kmeansK = unlist(reliaKmeansK_mp))
df_long <- pivot_longer(mpRelia, cols = 1:5, names_to = "Diktionäre", values_to = "relia")
ggplot(df_long, aes(Diktionäre, relia))+
geom_boxplot()+
ylab("Split-Half Reliabilität")
# scale_y_continuous(limits = c(0,1))
dfMean <- mpRelia  %>%
reframe(
gruendl = mean(gruendl),
clara = mean(clara),
claraK = mean(claraK),
kmeans = mean(kmeans),
kmeansK = mean(kmeansK)
)
dfMin <- mpRelia  %>%
reframe(
gruendl = min(gruendl),
clara = min(clara),
claraK = min(claraK),
kmeans = min(kmeans),
kmeansK = min(kmeansK)
)
dfMin
speechesRelia <- data.frame(gruendl = unlist(reliaGruendl_speeches), clara = unlist(reliaClara_speeches), claraK = unlist(reliaClaraK_speeches), kmeans = unlist(reliaKmeans_speeches), kmeansK = unlist(reliaKmeansK_speeches))
df_long <- pivot_longer(speechesRelia, cols = 1:5, names_to = "Diktionäre", values_to = "relia")
ggplot(df_long, aes(Diktionäre, relia))+
geom_boxplot()+
ylab("Split-Half Reliabilität")
#scale_y_continuous(limits = c(0,1))
dfMean <- speechesRelia %>%
reframe(
gruendl = mean(gruendl),
clara = mean(clara),
claraK = mean(claraK),
kmeans = mean(kmeans),
kmeansK = mean(kmeansK)
)
dfMin <- speechesRelia %>%
reframe(
gruendl = min(gruendl),
clara = min(clara),
claraK = min(claraK),
kmeans = min(kmeans),
kmeansK = min(kmeansK)
)
dfMin
dfMean
dfMin
mpRelia <- data.frame(gruendl = unlist(reliaGruendl_mp), clara = unlist(reliaClara_mp), claraK = unlist(reliaClaraK_mp), kmeans = unlist(reliaKmeans_mp), kmeansK = unlist(reliaKmeansK_mp))
df_long <- pivot_longer(mpRelia, cols = 1:5, names_to = "Diktionäre", values_to = "relia")
ggplot(df_long, aes(Diktionäre, relia))+
geom_boxplot()+
ylab("Split-Half Reliabilität")
# scale_y_continuous(limits = c(0,1))
dfMean <- mpRelia  %>%
reframe(
gruendl = mean(gruendl),
clara = mean(clara),
claraK = mean(claraK),
kmeans = mean(kmeans),
kmeansK = mean(kmeansK)
)
dfMin <- mpRelia  %>%
reframe(
gruendl = min(gruendl),
clara = min(clara),
claraK = min(claraK),
kmeans = min(kmeans),
kmeansK = min(kmeansK)
)
dfMean
dfMean
speechesRelia <- data.frame(gruendl = unlist(reliaGruendl_speeches), clara = unlist(reliaClara_speeches), claraK = unlist(reliaClaraK_speeches), kmeans = unlist(reliaKmeans_speeches), kmeansK = unlist(reliaKmeansK_speeches))
df_long <- pivot_longer(speechesRelia, cols = 1:5, names_to = "Diktionäre", values_to = "relia")
ggplot(df_long, aes(Diktionäre, relia))+
geom_boxplot()+
ylab("Split-Half Reliabilität")
#scale_y_continuous(limits = c(0,1))
dfMean <- speechesRelia %>%
reframe(
gruendl = mean(gruendl),
clara = mean(clara),
claraK = mean(claraK),
kmeans = mean(kmeans),
kmeansK = mean(kmeansK)
)
dfMin <- speechesRelia %>%
reframe(
gruendl = min(gruendl),
clara = min(clara),
claraK = min(claraK),
kmeans = min(kmeans),
kmeansK = min(kmeansK)
)
ggplot(data = df_long,aes(x = Diktionäre , y = relia, fill = Diktionäre)) +
geom_flat_violin(position = position_nudge(x = .2)) +
geom_jitter(width = .1, alpha = .3, size = .5) +
stat_summary(fun.data = custombox1, geom = "boxplot",
position = position_nudge(x = .2),
alpha = .2, colour = "BLACK", size = .75) +
theme(legend.position = "none") +
labs(y = "estimate") +
geom_text(data = df_longs,
aes(label = relia, group = Diktionäre),
stat = "identity", position = position_nudge(x = .35))
speechesRelia <- data.frame(gruendl = unlist(reliaGruendl_speeches), clara = unlist(reliaClara_speeches), claraK = unlist(reliaClaraK_speeches), kmeans = unlist(reliaKmeans_speeches), kmeansK = unlist(reliaKmeansK_speeches))
df_long <- pivot_longer(speechesRelia, cols = 1:5, names_to = "Diktionäre", values_to = "relia")
ggplot(df_long, aes(Diktionäre, relia))+
geom_boxplot()+
ylab("Split-Half Reliabilität")
#scale_y_continuous(limits = c(0,1))
dfMean <- speechesRelia %>%
reframe(
gruendl = mean(gruendl),
clara = mean(clara),
claraK = mean(claraK),
kmeans = mean(kmeans),
kmeansK = mean(kmeansK)
)
dfMin <- speechesRelia %>%
reframe(
gruendl = min(gruendl),
clara = min(clara),
claraK = min(claraK),
kmeans = min(kmeans),
kmeansK = min(kmeansK)
)
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
dplyr::group_by(group) %>%
dplyr::mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data, xminv = x,
xmaxv = x + violinwidth * (xmax - x))
# Make sure it's sorted properly to draw the outline
newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y))
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1,])
ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"),
required_aes = c("x", "y")
)
custombox1 <- function(y){
d <- data.frame(ymin=min(y),
lower=quantile(y,0.025),
middle=mean(y),
upper=quantile(y,0.975),
ymax=max(y),
y=y,
width=0.07,
row.names = NULL
)
ggplot(data = df_long,aes(x = Diktionäre , y = relia, fill = Diktionäre)) +
geom_flat_violin(position = position_nudge(x = .2)) +
geom_jitter(width = .1, alpha = .3, size = .5) +
stat_summary(fun.data = custombox1, geom = "boxplot",
position = position_nudge(x = .2),
alpha = .2, colour = "BLACK", size = .75) +
theme(legend.position = "none") +
labs(y = "estimate") +
geom_text(data = df_longs,
aes(label = relia, group = Diktionäre),
stat = "identity", position = position_nudge(x = .35))
ggname <- function(prefix, grob) {
grob$name <- grobName(grob, prefix)
grob
}
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
dplyr::group_by(group) %>%
dplyr::mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data, xminv = x,
xmaxv = x + violinwidth * (xmax - x))
# Make sure it's sorted properly to draw the outline
newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y))
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1,])
ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"),
required_aes = c("x", "y")
)
custombox1 <- function(y){
d <- data.frame(ymin=min(y),
lower=quantile(y,0.025),
middle=mean(y),
upper=quantile(y,0.975),
ymax=max(y),
y=y,
width=0.07,
row.names = NULL
)
d[1, ]
}
ggplot(data = df_long,aes(x = Diktionäre , y = relia, fill = Diktionäre)) +
geom_flat_violin(position = position_nudge(x = .2)) +
geom_jitter(width = .1, alpha = .3, size = .5) +
stat_summary(fun.data = custombox1, geom = "boxplot",
position = position_nudge(x = .2),
alpha = .2, colour = "BLACK", size = .75) +
theme(legend.position = "none") +
labs(y = "estimate") +
geom_text(data = df_longs,
aes(label = relia, group = Diktionäre),
stat = "identity", position = position_nudge(x = .35))
ggplot(data = df_long,aes(x = Diktionäre , y = relia, fill = Diktionäre)) +
geom_flat_violin(position = position_nudge(x = .2)) +
geom_jitter(width = .1, alpha = .3, size = .5) +
stat_summary(fun.data = custombox1, geom = "boxplot",
position = position_nudge(x = .2),
alpha = .2, colour = "BLACK", size = .75) +
theme(legend.position = "none") +
labs(y = "estimate") +
geom_text(data = df_long,
aes(label = relia, group = Diktionäre),
stat = "identity", position = position_nudge(x = .35))
"%||%" <- function(a, b) {
if (!is.null(a)) a else b
}
ggname <- function(prefix, grob) {
grob$name <- grobName(grob, prefix)
grob
}
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
dplyr::group_by(group) %>%
dplyr::mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data, xminv = x,
xmaxv = x + violinwidth * (xmax - x))
# Make sure it's sorted properly to draw the outline
newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y))
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1,])
ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"),
required_aes = c("x", "y")
)
ggplot(data = df_long,aes(x = Diktionäre , y = relia, fill = Diktionäre)) +
geom_flat_violin(position = position_nudge(x = .2)) +
geom_jitter(width = .1, alpha = .3, size = .5) +
stat_summary(fun.data = custombox1, geom = "boxplot",
position = position_nudge(x = .2),
alpha = .2, colour = "BLACK", size = .75) +
theme(legend.position = "none") +
labs(y = "estimate") +
geom_text(data = df_long,
aes(label = relia, group = Diktionäre),
stat = "identity", position = position_nudge(x = .35))
"%||%" <- function(a, b) {
if (!is.null(a)) a else b
}
#ggname <- function(prefix, grob) {
#grob$name <- grobName(grob, prefix)
#grob
#}
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
dplyr::group_by(group) %>%
dplyr::mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data, xminv = x,
xmaxv = x + violinwidth * (xmax - x))
# Make sure it's sorted properly to draw the outline
newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y))
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1,])
ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"),
required_aes = c("x", "y")
)
ggplot(data = df_long,aes(x = Diktionäre , y = relia, fill = Diktionäre)) +
geom_flat_violin(position = position_nudge(x = .2)) +
geom_jitter(width = .1, alpha = .3, size = .5) +
stat_summary(fun.data = custombox1, geom = "boxplot",
position = position_nudge(x = .2),
alpha = .2, colour = "BLACK", size = .75) +
theme(legend.position = "none") +
labs(y = "estimate") +
geom_text(data = df_long,
aes(label = relia, group = Diktionäre),
stat = "identity", position = position_nudge(x = .35))
speeches10Relia <- data.frame(gruendl = unlist(reliaGruendl_speeches), clara = unlist(reliaClara_speeches), gruendl_10 = unlist(reliaGruendl_speeches10), clara_10 = unlist(reliaClara_speeches10))
df_long <- pivot_longer(speeches10Relia, cols = 1:4, names_to = "Diktionäre", values_to = "relia")
ggplot(df_long, aes(Diktionäre, relia))+
geom_boxplot()+
ylab("Split-Half Reliabilität")
#scale_y_continuous(limits = c(0,1))
dfMean <- speeches10Relia  %>%
reframe(
gruendl = mean(gruendl),
gruendl_10 = mean(gruendl_10),
clara = mean(clara),
clara_10 = mean(clara_10)
)
dfMin <- speeches10Relia  %>%
reframe(
gruendl = min(gruendl),
gruendl_10 = min(gruendl_10),
clara = min(clara),
clara_10 = min(clara_10)
)
dfMean
manifestoR::mp_setapikey("./Expertendaten/manifesto_apikey.txt")
election_programmes <- mp_corpus(countryname == "Germany")
library(RPostgres)
library(RPostgreSQL)
library(quanteda)
library(quanteda.textplots)
library(udpipe)
#library(proxy)
library(ggplot2)
library(tidyverse)
library(proxy)
library(cluster)
library(factoextra)
library(FactoMineR)
library(here)
library(devtools)
library(proxyC)
#library(tidytext)
library(manifestoR)
library(gt)
devtools::install_github("jogrue/regexhelpeR")
devtools::install_github("jogrue/multidictR")
devtools::install_github("jogrue/popdictR")
devtools::install_github("TomSOWI/weightdictR")
manifestoR::mp_cite()
manifestoR::mp_setapikey("./Expertendaten/manifesto_apikey.txt")
manifestoR::mp_cite()
election_programmes <- mp_corpus(countryname == "Germany")
manifestoR::mp_cite()
